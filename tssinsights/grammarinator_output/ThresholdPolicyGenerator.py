# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class ThresholdPolicyGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def policy(self, parent=None):
        with RuleContext(self, UnparserRule(name='policy', parent=parent)) as current:
            self.node(parent=current)
            self.EOF(parent=current)
            return current
    policy.min_depth = 3

    def node(self, parent=None):
        with RuleContext(self, UnparserRule(name='node', parent=parent)) as current:
            with AlternationContext(self, [2, 5, 5, 5, 5, 5], [1, 1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.leaf, self.thresh1, self.thresh2, self.thresh3, self.thresh4, self.thresh5][choice0](parent=current)
            return current
    node.min_depth = 2

    def leaf(self, parent=None):
        with RuleContext(self, UnparserRule(name='leaf', parent=parent)) as current:
            UnlexerRule(src='pk(', parent=current)
            self.ID(parent=current)
            UnlexerRule(src=')', parent=current)
            return current
    leaf.min_depth = 1

    def thresh1(self, parent=None):
        with RuleContext(self, UnparserRule(name='thresh1', parent=parent)) as current:
            UnlexerRule(src='thresh(1,', parent=current)
            self.nodeList1(parent=current)
            UnlexerRule(src=')', parent=current)
            return current
    thresh1.min_depth = 4

    def thresh2(self, parent=None):
        with RuleContext(self, UnparserRule(name='thresh2', parent=parent)) as current:
            UnlexerRule(src='thresh(2,', parent=current)
            self.nodeList2(parent=current)
            UnlexerRule(src=')', parent=current)
            return current
    thresh2.min_depth = 4

    def thresh3(self, parent=None):
        with RuleContext(self, UnparserRule(name='thresh3', parent=parent)) as current:
            UnlexerRule(src='thresh(3,', parent=current)
            self.nodeList3(parent=current)
            UnlexerRule(src=')', parent=current)
            return current
    thresh3.min_depth = 4

    def thresh4(self, parent=None):
        with RuleContext(self, UnparserRule(name='thresh4', parent=parent)) as current:
            UnlexerRule(src='thresh(4,', parent=current)
            self.nodeList4(parent=current)
            UnlexerRule(src=')', parent=current)
            return current
    thresh4.min_depth = 4

    def thresh5(self, parent=None):
        with RuleContext(self, UnparserRule(name='thresh5', parent=parent)) as current:
            UnlexerRule(src='thresh(5,', parent=current)
            self.nodeList5(parent=current)
            UnlexerRule(src=')', parent=current)
            return current
    thresh5.min_depth = 4

    def nodeList1(self, parent=None):
        with RuleContext(self, UnparserRule(name='nodeList1', parent=parent)) as current:
            self.node(parent=current)
            if self._max_depth >= 3:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=',', parent=current)
                    self.node(parent=current)
            return current
    nodeList1.min_depth = 3

    def nodeList2(self, parent=None):
        with RuleContext(self, UnparserRule(name='nodeList2', parent=parent)) as current:
            self.node(parent=current)
            UnlexerRule(src=',', parent=current)
            self.node(parent=current)
            if self._max_depth >= 3:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=',', parent=current)
                    self.node(parent=current)
            return current
    nodeList2.min_depth = 3

    def nodeList3(self, parent=None):
        with RuleContext(self, UnparserRule(name='nodeList3', parent=parent)) as current:
            self.node(parent=current)
            UnlexerRule(src=',', parent=current)
            self.node(parent=current)
            UnlexerRule(src=',', parent=current)
            self.node(parent=current)
            if self._max_depth >= 3:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=',', parent=current)
                    self.node(parent=current)
            return current
    nodeList3.min_depth = 3

    def nodeList4(self, parent=None):
        with RuleContext(self, UnparserRule(name='nodeList4', parent=parent)) as current:
            self.node(parent=current)
            UnlexerRule(src=',', parent=current)
            self.node(parent=current)
            UnlexerRule(src=',', parent=current)
            self.node(parent=current)
            UnlexerRule(src=',', parent=current)
            self.node(parent=current)
            if self._max_depth >= 3:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=',', parent=current)
                    self.node(parent=current)
            return current
    nodeList4.min_depth = 3

    def nodeList5(self, parent=None):
        with RuleContext(self, UnparserRule(name='nodeList5', parent=parent)) as current:
            self.node(parent=current)
            UnlexerRule(src=',', parent=current)
            self.node(parent=current)
            UnlexerRule(src=',', parent=current)
            self.node(parent=current)
            UnlexerRule(src=',', parent=current)
            self.node(parent=current)
            UnlexerRule(src=',', parent=current)
            self.node(parent=current)
            if self._max_depth >= 3:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=',', parent=current)
                    self.node(parent=current)
            return current
    nodeList5.min_depth = 3

    def ID(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ID', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[2]), parent=current)
            return current
    ID.min_depth = 0

    _default_rule = policy

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(65, 91), range(95, 96), range(97, 123)])),
        2: list(itertools.chain.from_iterable([range(48, 58), range(65, 91), range(95, 96), range(97, 123)])),
    }
